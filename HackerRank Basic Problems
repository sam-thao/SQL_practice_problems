hackerrank, ms sql server, easy

-- Question
Query all columns for all American cities in the CITY table with populations larger than 100,000. The CountryCode for America is USA.

select *
from city
where countrycode = 'USA' and population > '100000';

-- Question
Query the NAME field for all American cities in the CITY table with populations larger than 120,000. The CountryCode for America is USA.

select name
from city
where countrycode = 'USA' and population > 120000;

-- Question
Query all columns (attributes) for every row in the CITY table.

select *
from city

-- Question
Query all columns for a city in CITY with the ID 1661.;

select *
from city
where id = 1661;

-- Weather Observation Station 1
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

select *
from city
where countrycode = 'JPN';

-- Weather Observation Station 2
Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

select name
from city
where countrycode = 'JPN';

-- Weather Observation Station 3
Query a list of CITY and STATE from the STATION table.

select city, state
from station;

-- Weather Observation Station 4
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

select distinct city
from station
where id % 2 = 0;

-- Weather Observation Station 5
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

select count(city) - count(distinct city)
from station;

using count() to figure out how many cities are in table vs count() & distinct

-- Weather Observation Station 5
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

select top 1 city, len(city) as length
from station
order by length, city;

select top 1 city, len(city) as length
from station
order by length desc, city;

-- Weather Observation Station 6
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

select city
from station
where city like '[aeiou]%';

-- Weather Observation Station 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

select city
from station
where right(city,1) in ('a','e','i','o','u');

-- Weather Observation Station 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

select distinct city
from station
where city like '%[a,e,i,o,u]';

-- Weather Observation Station 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

select distinct city
from station
where city like '[a,e,i,o,u]%[a,e,i,o,u]';

-- Weather Observation Station 9
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct city
from station
where city not like '[a,e,i,o,u]%';

-- Weather Observation Station 10
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct city
from station
where city not like '%[a,e,i,o,u]';

-- Weather Observation Station 11
Query the list of CITY names from STATION that EITHER do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

select distinct city
from station
where city not like '[a,e,i,o,u]%[a,e,i,o,u]';

-- Weather Observation Station 12
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct city
from station
where city not like '[a,e,i,o,u]%' and city not like '%[a,e,i,o,u]';

-- Higher Than 75 Marks
Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

select name
from student
where marks > 75
order by right(name,3), id;

-- Employee Names
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select name
from employee
order by name;

-- Employee Salaries
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000 per month who have been employees for less than 10 months. 
Sort your result by ascending employee_id.

select name
from employee
where salary > 2000 and months < 10;

-- Revising Aggregations - The Sum Function
Query the total population of all cities in CITY where District is California.

select sum(population)
from city
where district = 'California'

-- Revising Aggregations - Averages
Query the average population of all cities in CITY where District is California.

select avg(population)
from city
where district = 'California'

-- Average Population
Query the average population for all cities in CITY, rounded down to the nearest integer.

select round(avg(population),0)
from city

-- Japan Population
Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

select sum(population)
from city
where countrycode = 'JPN'

-- Population Density Difference
Query the difference between the maximum and minimum populations in CITY.

select (max(population) - min(population)) as population_difference
from city

-- The Blunder
Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's key was broken until after completing the calculation. 
She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.:  actual - miscalculated average monthly salaries), and round it up to the next integer.

select ceiling
(
    avg(cast(salary as decimal)) - 
    avg(
        cast(
            replace(salary,0,'') as decimal
            )
        )
)
from Employees

-- Average Population of Each Continent
Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

select co.continent, floor(avg(ci.population))
from country co
inner join city ci
on co.code = ci.countrycode
group by co.continent

-- Basic Join Average Population of Each Continent
Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

The FLOOR() function returns the largest integer value that is smaller than or equal to a number.

select country.contient, floor(avg(city.population)) AS AverageCityPopulation
from city
join county on city.countrycode = country.code
group by country.contient

-- Basic Join The Report
You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
Grades contains the following data: Grade, Min_Mark, Max_Mark

Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. 
Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. 
If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.

select 
    case
        when g.grade >= 8 then s.name
        else null
    end as name,
    g.grad,
    s.marks
from 
    sudent as s
left join
    grades as g
on
    s.marks between g.min_mark and g.max_mark
order by
    g.grade desc,
    name asc,
    s.marks asc;






